// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domainEvent "lifelogger/server/config/domainEvent"

	mock "github.com/stretchr/testify/mock"
)

// EventProcessor is an autogenerated mock type for the EventProcessor type
type EventProcessor struct {
	mock.Mock
}

// GetCtx provides a mock function with given fields:
func (_m *EventProcessor) GetCtx() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCtx")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// ProcessAndRemove provides a mock function with given fields:
func (_m *EventProcessor) ProcessAndRemove() {
	_m.Called()
}

// Publish provides a mock function with given fields: event
func (_m *EventProcessor) Publish(event domainEvent.DomainEvent) {
	_m.Called(event)
}

// SetCtx provides a mock function with given fields: ctx
func (_m *EventProcessor) SetCtx(ctx context.Context) {
	_m.Called(ctx)
}

// NewEventProcessor creates a new instance of EventProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventProcessor {
	mock := &EventProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
