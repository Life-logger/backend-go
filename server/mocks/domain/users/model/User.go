// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "lifelogger/server/domain/users/dto"

	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// ToDto provides a mock function with given fields:
func (_m *User) ToDto() dto.UserDto {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ToDto")
	}

	var r0 dto.UserDto
	if rf, ok := ret.Get(0).(func() dto.UserDto); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.UserDto)
	}

	return r0
}

// UserEmail provides a mock function with given fields:
func (_m *User) UserEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserId provides a mock function with given fields:
func (_m *User) UserId() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserId")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UserName provides a mock function with given fields:
func (_m *User) UserName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
