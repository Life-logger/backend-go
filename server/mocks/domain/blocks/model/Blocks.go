// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Blocks is an autogenerated mock type for the Blocks type
type Blocks struct {
	mock.Mock
}

// BackgroundImageUrl provides a mock function with given fields:
func (_m *Blocks) BackgroundImageUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BackgroundImageUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BlockId provides a mock function with given fields:
func (_m *Blocks) BlockId() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockId")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BlockMemo provides a mock function with given fields:
func (_m *Blocks) BlockMemo() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockMemo")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CategoryId provides a mock function with given fields:
func (_m *Blocks) CategoryId() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CategoryId")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Color provides a mock function with given fields:
func (_m *Blocks) Color() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Color")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Duration provides a mock function with given fields:
func (_m *Blocks) Duration() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Duration")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// EndTime provides a mock function with given fields:
func (_m *Blocks) EndTime() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndTime")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StartTime provides a mock function with given fields:
func (_m *Blocks) StartTime() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartTime")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewBlocks creates a new instance of Blocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlocks(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blocks {
	mock := &Blocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
