// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Category is an autogenerated mock type for the Category type
type Category struct {
	mock.Mock
}

// Color provides a mock function with given fields:
func (_m *Category) Color() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Color")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *Category) Id() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Title provides a mock function with given fields:
func (_m *Category) Title() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Title")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserEmail provides a mock function with given fields:
func (_m *Category) UserEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewCategory creates a new instance of Category. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Category {
	mock := &Category{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
