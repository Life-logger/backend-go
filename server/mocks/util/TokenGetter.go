// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TokenGetter is an autogenerated mock type for the TokenGetter type
type TokenGetter struct {
	mock.Mock
}

// GetAccessToken provides a mock function with given fields: authorizeCode
func (_m *TokenGetter) GetAccessToken(authorizeCode string) (string, string) {
	ret := _m.Called(authorizeCode)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (string, string)); ok {
		return rf(authorizeCode)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(authorizeCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(authorizeCode)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetNewAccessToken provides a mock function with given fields: refreshToken
func (_m *TokenGetter) GetNewAccessToken(refreshToken string) string {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetNewAccessToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: accessToken
func (_m *TokenGetter) GetUserInfo(accessToken string) (string, string, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewTokenGetter creates a new instance of TokenGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenGetter {
	mock := &TokenGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
